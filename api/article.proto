syntax = "proto3";

package api;

option go_package = "github.com/hatlonely/rpc-ops/api/gen/go/api";

import "google/api/annotations.proto";

message Empty {}

message Article {
  string id = 1;
  string authorID = 2;
  string title = 3;
  repeated string tags = 4;
  string brief = 5;
  string content = 6;
  int32 createAt = 7;
  int32 updateAt = 8;
}

message ArticleID {
  string id = 1;
}

message ListArticleReq {
  int32 offset = 1;
  int32 limit = 2;
  string authorID = 3;
}

message ListArticleRes {
  repeated Article articles = 1;
}

message Author {
  string id = 1;
  string key = 2;
  string name = 3;
}

message AuthorID {
  string id = 1;
}

message ListArticleMetaReq {
  int32 offset = 1;
  int32 limit = 2;
  string authorID = 3;
}

message ArticleMeta {
  string id = 1;
  string authorID = 2;
  string authorName = 3;
  string title = 4;
  repeated string tags = 5;
  string brief = 6;
  int32 createAt = 7;
  int32 updateAt = 8;
}

message ListArticleMetaRes {
  repeated ArticleMeta articleMetas = 1;
}

service ArticleService {
  rpc Ping(Empty) returns (Empty) {
    option (google.api.http) = {
      get: "/ping"
    };
  }

  rpc AddOrUpdateAuthor(Author) returns (AuthorID) {
    option (google.api.http) = {
      post: "/v1/addOrUpdateAuthor"
      body: "*"
    };
  }

  rpc DelAuthorByKey(Author) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/delAuthorByKey"
      body: "*"
    };
  }

  rpc ListArticleMeta(ListArticleMetaReq) returns (ListArticleMetaRes) {
    option (google.api.http) = {
      get: "/v1/listArticleMeta"
    };
  }

  rpc PutAuthor(Author) returns (AuthorID) {
    option (google.api.http) = {
      post: "/v1/author"
      body: "*"
    };
  }

  rpc DelAuthor(AuthorID) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/author"
    };
  }

  rpc PutArticle(Article) returns (ArticleID) {
    option (google.api.http) = {
      post: "/v1/article"
      body: "*"
    };
  }

  rpc GetArticle(ArticleID) returns (Article) {
    option (google.api.http) = {
      get: "/v1/article/{id}"
    };
  }

  rpc DelArticle(ArticleID) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/article/{id}"
    };
  }

  rpc UpdateArticle(Article) returns (Empty) {
    option (google.api.http) = {
      put: "/v1/article/{id}"
      body: "*"
    };
  }

  rpc ListArticle(ListArticleReq) returns (ListArticleRes) {
    option (google.api.http) = {
      get: "/v1/articles"
    };
  }
}
